FROM golang:1.23.0-alpine AS go-builder

WORKDIR /app

# Install git and other dependencies
RUN echo "Installing Go build dependencies..." && \
    apk add --no-cache git gcc musl-dev && \
    echo "✅ Go build dependencies installed"

# We'll mount the app directory as a volume
# This will let us build without copying files

FROM node:20-alpine AS node-builder

WORKDIR /app

# Install dependencies and tools
RUN echo "Installing Node.js build dependencies..." && \
    apk add --no-cache jq bash && \
    echo "✅ Node.js build dependencies installed"

# We'll mount node_modules and app as volumes

FROM alpine:latest

WORKDIR /app

# Install necessary tools and Go 1.23.0 with better feedback
RUN echo "Installing base system..." && \
    apk add --no-cache bash nodejs npm git jq curl && \
    echo "✅ Base system installed" && \
    echo "Installing Go 1.23.0..." && \
    mkdir -p /usr/local/go && \
    curl -sSL https://dl.google.com/go/go1.23.0.linux-amd64.tar.gz | tar -C /usr/local -xz && \
    ln -s /usr/local/go/bin/go /usr/local/bin/go && \
    echo "✅ Go 1.23.0 installed"

ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOROOT="/usr/local/go"

# Create verify-build.sh in the scripts directory
RUN mkdir -p /app/scripts

# Copy a simpler verification script
COPY <<EOF /app/scripts/verify-build.sh
#!/bin/bash
set -e

echo "===== LocalCA Build Verification ====="
echo "Starting verification process..."
echo "Go version: \$(go version)"
echo "Node.js version: \$(node -v)"
echo "NPM version: \$(npm -v)"

# Create directory if it doesn't exist
mkdir -p scripts

# Update package.json for compatibility
echo "Updating package.json for compatibility..."
jq '.devDependencies."@testing-library/react" = "^14.0.0"' package.json > tmp.json && mv tmp.json package.json
jq '.dependencies.react = "^18.2.0" | .dependencies."react-dom" = "^18.2.0"' package.json > tmp.json && mv tmp.json package.json
jq '.dependencies."date-fns" = "^3.6.0"' package.json > tmp.json && mv tmp.json package.json
echo "✅ Package.json updated"

# Install Go dependencies
echo "Installing Go dependencies..."
go mod download
echo "✅ Go dependencies installed"

# Build Go application
echo "Building Go application..."
CGO_ENABLED=0 go build -v -o localca-go

# Check Go build result
if [ ! -f "localca-go" ]; then
    echo "❌ Go build failed - executable not found"
    exit 1
else
    echo "✅ Go build successful"
    ls -la localca-go
fi

# Install npm dependencies with less verbose output
echo "Installing npm dependencies..."
# Suppress deprecation warnings
npm config set loglevel error
npm install --legacy-peer-deps --no-fund --no-audit
echo "✅ NPM dependencies installed"

# Build frontend
echo "Building frontend..."
# Suppress deprecation warnings
NODE_OPTIONS=--no-warnings npm run build

# Check frontend build result
if [ ! -d ".next" ]; then
    echo "❌ Next.js build failed - .next directory not found"
    exit 1
else
    echo "✅ Next.js build successful"
    du -sh .next
fi

echo "===== Build verification completed successfully ====="
exit 0
EOF

RUN chmod +x /app/scripts/verify-build.sh && \
    echo "✅ Verification script created at /app/scripts/verify-build.sh"

# Use the verification script in scripts directory
CMD ["/app/scripts/verify-build.sh"] 