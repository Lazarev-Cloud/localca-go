---
name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [main]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ecosystem: [go, npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        if: matrix.ecosystem == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Setup Node.js
        if: matrix.ecosystem == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Go dependency scanning
        if: matrix.ecosystem == 'go'
        run: |
          # Install nancy for Go dependency scanning
          go install github.com/sonatype-nexus-community/nancy@latest

          # Generate dependency list and scan
          go list -json -deps | nancy sleuth --output json > nancy-results.json || true

          # Generate vulnerability report
          echo "# Go Dependency Security Report" > go-security-report.md
          echo "Generated: $(date)" >> go-security-report.md
          echo "" >> go-security-report.md

          if [ -s nancy-results.json ]; then
            echo "## Vulnerabilities Found" >> go-security-report.md
            jq -r '.vulnerable_packages[] | "- **\(.package)** \(.version): \(.vulnerability_id) - \(.title)"' nancy-results.json >> go-security-report.md 2>/dev/null || echo "No vulnerabilities found" >> go-security-report.md
          else
            echo "✅ No vulnerabilities detected in Go dependencies" >> go-security-report.md
          fi

      - name: NPM dependency scanning
        if: matrix.ecosystem == 'npm'
        run: |
          # Fix date-fns version and install
          npm pkg set dependencies.date-fns="^3.6.0"
          npm install --legacy-peer-deps

          # Run audit
          npm audit --json > npm-audit.json || true

          # Generate vulnerability report
          echo "# NPM Dependency Security Report" > npm-security-report.md
          echo "Generated: $(date)" >> npm-security-report.md
          echo "" >> npm-security-report.md

          if [ -s npm-audit.json ] && [ "$(jq -r '.vulnerabilities | length' npm-audit.json 2>/dev/null || echo 0)" -gt 0 ]; then
            echo "## Vulnerabilities Found" >> npm-security-report.md
            jq -r '.vulnerabilities | to_entries[] | "- **\(.key)**: \(.value.severity) - \(.value.via[0].title // .value.via[0])"' npm-audit.json >> npm-security-report.md 2>/dev/null || echo "Error parsing audit results" >> npm-security-report.md
          else
            echo "✅ No vulnerabilities detected in NPM dependencies" >> npm-security-report.md
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-${{ matrix.ecosystem }}
          path: |
            *-security-report.md
            nancy-results.json
            npm-audit.json
          retention-days: 7

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.82.6
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  container-security:
    name: Container Security Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          docker build -t localca-backend:test -f Dockerfile .
          docker build -t localca-frontend:test -f Dockerfile.frontend .

      - name: Run Trivy baseline scan
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Scan images
          trivy image --format json --output backend-trivy.json localca-backend:test
          trivy image --format json --output frontend-trivy.json localca-frontend:test

          # Generate human-readable reports
          trivy image --format table localca-backend:test > backend-security-report.txt
          trivy image --format table localca-frontend:test > frontend-security-report.txt

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            *-trivy.json
            *-security-report.txt
          retention-days: 14

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, secrets-scan]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Dependency Security" >> security-summary.md

          # Go dependencies
          if [ -f "security-reports/dependency-security-go/go-security-report.md" ]; then
            echo "### Go Dependencies" >> security-summary.md
            tail -n +4 security-reports/dependency-security-go/go-security-report.md >> security-summary.md
            echo "" >> security-summary.md
          fi

          # NPM dependencies
          if [ -f "security-reports/dependency-security-npm/npm-security-report.md" ]; then
            echo "### NPM Dependencies" >> security-summary.md
            tail -n +4 security-reports/dependency-security-npm/npm-security-report.md >> security-summary.md
            echo "" >> security-summary.md
          fi

          echo "## Secrets Scanning" >> security-summary.md
          echo "✅ Secrets scanning completed (check workflow logs for details)" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Recommendations" >> security-summary.md
          echo "- Review and address any vulnerabilities found above" >> security-summary.md
          echo "- Keep dependencies up to date with Dependabot" >> security-summary.md
          echo "- Regular security scanning is configured to run weekly" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30

      - name: Add to job summary
        run: cat security-summary.md >> $GITHUB_STEP_SUMMARY
