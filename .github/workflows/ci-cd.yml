name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: choice
        options:
          - dev
          - test
        default: 'dev'
        required: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Go dependencies
        run: go mod download

      - name: Run package tests
        run: go test -v -cover ./pkg/... -coverprofile=coverage.out

      - name: Run main tests
        run: go test -v -cover . -coverprofile=coverage-main.out

      - name: Setup Node.js for frontend tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Create temporary package.json with compatible testing libraries
      - name: Update testing library versions in package.json
        run: |
          jq '.devDependencies."@testing-library/react" = "^14.0.0"' package.json > tmp.json && mv tmp.json package.json
          jq '.dependencies.react = "^18.2.0" | .dependencies."react-dom" = "^18.2.0"' package.json > tmp.json && mv tmp.json package.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests with coverage
        run: npm test -- --coverage --coverageReporters=lcov --coverageDirectory=coverage

      - name: Run ESLint
        run: npx eslint -f checkstyle app components hooks lib -o eslint-report.xml || true
        
      - name: Merge coverage reports
        run: |
          echo "mode: set" > coverage-merged.out
          grep -h -v "mode: set" coverage.out coverage-main.out >> coverage-merged.out

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-merged.out
            coverage.out
            coverage-main.out
            coverage/lcov.info
            eslint-report.xml

  build:
    name: Test Build Process
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Go dependencies
        run: go mod download

      - name: Build Go application
        run: go build -v -o localca-go

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Create temporary package.json with compatible testing libraries
      - name: Update testing library versions in package.json
        run: |
          jq '.devDependencies."@testing-library/react" = "^14.0.0"' package.json > tmp.json && mv tmp.json package.json
          jq '.dependencies.react = "^18.2.0" | .dependencies."react-dom" = "^18.2.0"' package.json > tmp.json && mv tmp.json package.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -f "localca-go" ]; then
            echo "Go build failed - executable not found"
            exit 1
          fi
          
          if [ ! -d ".next" ]; then
            echo "Next.js build failed - .next directory not found"
            exit 1
          fi
          
          echo "âœ… Build verification successful"
          ls -la localca-go
          du -sh .next

  sonarqube:
    name: SonarQube Analysis
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      # Ensure correct directory structure for coverage reports
      - name: Create coverage directory
        run: mkdir -p coverage

      - name: Move LCOV file to correct location if needed
        run: |
          if [ -f "lcov.info" ]; then
            mv lcov.info coverage/lcov.info
          fi

      # Install and run Go linters
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Go linters
        run: |
          go install golang.org/x/lint/golint@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.57.0

      - name: Run Go Vet
        run: go vet ./... > govet-report.out || true

      - name: Run golint
        run: golint ./... > golint-report.out || true
        
      - name: Run golangci-lint
        run: golangci-lint run --out-format checkstyle --issues-exit-code=0 > golangci-lint-report.xml || true

      # Install SonarScanner
      - name: Set up SonarQube Scanner
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Lazarev-Cloud_localca-go
            -Dsonar.organization=lazarev-cloud
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.go.coverage.reportPaths=coverage-merged.out
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**,**/node_modules/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go,**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx
            -Dsonar.go.govet.reportPaths=govet-report.out
            -Dsonar.go.golint.reportPaths=golint-report.out
            -Dsonar.go.golangci-lint.reportPaths=golangci-lint-report.xml
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.typescript.tsconfigPaths=tsconfig.json
            -Dsonar.eslint.reportPaths=eslint-report.xml

  docker:
    name: Build and Push Docker Images
    needs: [test, sonarqube, build]
    runs-on: ubuntu-latest
    # Only run this job on main branch or tags, not on PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tags
        id: tags
        run: |
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "BACKEND_TAGS=ghcr.io/${REPO_LOWER}/backend:latest,ghcr.io/${REPO_LOWER}/backend:${VERSION}" >> $GITHUB_ENV
            echo "FRONTEND_TAGS=ghcr.io/${REPO_LOWER}/frontend:latest,ghcr.io/${REPO_LOWER}/frontend:${VERSION}" >> $GITHUB_ENV
          else
            echo "BACKEND_TAGS=ghcr.io/${REPO_LOWER}/backend:unstable" >> $GITHUB_ENV
            echo "FRONTEND_TAGS=ghcr.io/${REPO_LOWER}/frontend:unstable" >> $GITHUB_ENV
          fi

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.BACKEND_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=LocalCA Backend - Certificate Authority Management Tool
            org.opencontainers.image.licenses=Dual License: Free for Self-Hosting / Commercial License Required
            org.opencontainers.image.vendor=lazarev.cloud
            org.opencontainers.image.authors=lazarevtill
            org.opencontainers.image.title=LocalCA Backend
            org.opencontainers.image.url=https://lazarev.cloud

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ env.FRONTEND_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=LocalCA Frontend - Certificate Authority Management UI
            org.opencontainers.image.licenses=Dual License: Free for Self-Hosting / Commercial License Required
            org.opencontainers.image.vendor=lazarev.cloud
            org.opencontainers.image.authors=lazarevtill
            org.opencontainers.image.title=LocalCA Frontend
            org.opencontainers.image.url=https://lazarev.cloud
            