name: CI/CD Pipeline
'on':
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to run tests against
        type: choice
        options:
          - dev
          - test
        default: dev
        required: true
permissions:
  contents: read # Default minimal permissions
  security-events: write # For uploading security scan results

jobs:
  backend_tests_and_security:
    name: Backend Tests & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      - name: Install Go dependencies
        run: go mod download

      - name: Run Go tests with coverage
        run: |
          go test -v -cover ./pkg/... -coverprofile=coverage.out || true
          go test -v -cover . -coverprofile=coverage-main.out || true
          echo "mode: set" > coverage-merged.out
          grep -h -v "mode: set" coverage.out coverage-main.out >> coverage-merged.out || true

      # Run security scans in parallel with tests
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Run Nancy for Dependency Scanning
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps | nancy sleuth --output json > nancy-results.json || true

      # Generate SBOM as part of the same job
      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          artifact-name: backend-sbom.spdx.json
          format: spdx-json
          path: .

      # Upload all artifacts at once
      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: |
            coverage-merged.out
            coverage.out
            coverage-main.out
            gosec-results.sarif
            nancy-results.json
            backend-sbom.spdx.json
          retention-days: 5

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: '${{ secrets.CODECOV_TOKEN }}'
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          files: ./coverage-merged.out

  frontend_tests_and_security:
    name: Frontend Tests & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      # Simplify package.json preparation
      - name: Prepare package.json for testing
        run: |
          jq '.dependencies.react = "^18.2.0" | 
              .dependencies."react-dom" = "^18.2.0" | 
              .devDependencies."@testing-library/react" = "^14.0.0" | 
              .devDependencies."@types/react" = "^18.2.48" | 
              .devDependencies."@types/react-dom" = "^18.2.18" | 
              .dependencies."date-fns" = "^3.6.0"' package.json > package.json.testing
          cp package.json package.json.original
          mv package.json.testing package.json
          echo "Modified package.json for testing"

      - name: Install frontend dependencies
        run: npm install --legacy-peer-deps

      # Run tests and linting in parallel
      - name: Run frontend tests with coverage
        run: |
          mkdir -p coverage
          npm test -- --coverage --coverageReporters=lcov --coverageDirectory=coverage || echo "Tests completed with issues"
          [ ! -f "coverage/lcov.info" ] && touch coverage/lcov.info

      - name: Run ESLint and npm audit in parallel
        run: |
          npx eslint -f json app components hooks lib -o eslint-report.json || echo '[]' > eslint-report.json
          npm audit --json > npm-audit.json || echo '{"advisories":{}}' > npm-audit.json

      # Generate SBOM as part of the same job
      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@v0
        with:
          artifact-name: frontend-sbom.spdx.json
          format: spdx-json
          path: .

      # Upload all artifacts at once
      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: |
            coverage/
            eslint-report.json
            npm-audit.json
            frontend-sbom.spdx.json
          retention-days: 5

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: '${{ secrets.CODECOV_TOKEN }}'
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          directory: ./coverage/
          files: ./coverage/lcov.info

      - name: Restore original package.json
        run: |
          if [ -f package.json.original ]; then
            mv package.json.original package.json
          fi

  build_and_verify:
    name: Build & Verify
    runs-on: ubuntu-latest
    needs: [backend_tests_and_security, frontend_tests_and_security]
    permissions:
      contents: read
      id-token: write
      attestations: write
    outputs:
      backend_digest: ${{ steps.build-backend.outputs.digest }}
      frontend_digest: ${{ steps.build-frontend.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup and build Go application
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      - name: Build Go application
        run: |
          go mod download
          go build -v -o localca-go

      # Setup and build frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Prepare package.json for build
        run: |
          cp package.json package.json.original
          jq '.dependencies."date-fns" = "^3.6.0"' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Build frontend
        run: |
          npm install --legacy-peer-deps
          npm run build

      - name: Restore original package.json
        run: |
          if [ -f package.json.original ]; then
            mv package.json.original package.json
          fi

      # Verify build artifacts
      - name: Verify build artifacts
        run: |
          if [ ! -f "localca-go" ]; then
            echo "Go build failed - executable not found"
            exit 1
          fi
          if [ ! -d ".next" ]; then
            echo "Next.js build failed - .next directory not found"
            exit 1
          fi
          echo "âœ… Build verification successful"

      # Set up Docker for container builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set lowercase repository name
      - name: Set lowercase repository name
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_ENV

      # Build backend container
      - name: Build backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ghcr.io/${{ env.REPO_LC }}/backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=ghcr.io/${{ env.REPO_LC }}/backend:test

      # Build frontend container
      - name: Build frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: false
          load: true
          tags: ghcr.io/${{ env.REPO_LC }}/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=ghcr.io/${{ env.REPO_LC }}/frontend:test

      # Scan containers with Trivy
      - name: Scan backend container with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.REPO_LC }}/backend:test
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Scan frontend container with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.REPO_LC }}/frontend:test
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Upload scan results
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif,trivy-frontend-results.sarif'
          category: 'container-security'

      # Generate SBOM attestation for binary
      - name: Generate SBOM for Binary
        uses: anchore/sbom-action@v0
        with:
          artifact-name: localca-go-sbom.spdx.json
          format: spdx-json
          path: .
          output-file: localca-go.spdx.json

      # Generate binary attestation
      - name: Generate Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: localca-go

      # Generate SBOM attestation
      - name: Generate SBOM Attestation
        uses: actions/attest-sbom@v1
        with:
          subject-path: localca-go
          sbom-path: localca-go.spdx.json

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            localca-go
            localca-go.spdx.json
            .next/**/*
            trivy-backend-results.sarif
            trivy-frontend-results.sarif
          retention-days: 5

  deploy:
    name: Deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: build_and_verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Docker for pushing
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up environment
      - name: Set environment variables
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_ENV
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          fi

      # Build and push backend image
      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/backend:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.REPO_LC }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push frontend image
      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/frontend:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.REPO_LC }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Generate SBOM for published images
      - name: Generate Backend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ env.REPO_LC }}/backend:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: backend.spdx.json

      - name: Generate Frontend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ env.REPO_LC }}/frontend:${{ env.IMAGE_TAG }}
          format: spdx-json
          output-file: frontend.spdx.json

      # Attest container images
      - name: Attest Backend Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ env.REPO_LC }}/backend
          subject-digest: ${{ steps.build-backend.outputs.digest }}
          push-to-registry: true

      - name: Attest Backend SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ghcr.io/${{ env.REPO_LC }}/backend
          subject-digest: ${{ steps.build-backend.outputs.digest }}
          sbom-path: backend.spdx.json
          push-to-registry: true

      - name: Attest Frontend Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ env.REPO_LC }}/frontend
          subject-digest: ${{ steps.build-frontend.outputs.digest }}
          push-to-registry: true

      - name: Attest Frontend SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ghcr.io/${{ env.REPO_LC }}/frontend
          subject-digest: ${{ steps.build-frontend.outputs.digest }}
          sbom-path: frontend.spdx.json
          push-to-registry: true

      # Upload deployment artifacts
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            backend.spdx.json
            frontend.spdx.json
          retention-days: 5

  sonarqube:
    name: SonarQube Analysis
    needs: [backend_tests_and_security, frontend_tests_and_security]
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Prepare coverage reports
      - name: Prepare coverage reports
        run: |
          mkdir -p coverage
          cp artifacts/backend-artifacts/coverage-merged.out . || touch coverage-merged.out
          cp -r artifacts/frontend-artifacts/coverage/* coverage/ || mkdir -p coverage
          touch coverage/lcov.info
          cp artifacts/frontend-artifacts/eslint-report.json . || touch eslint-report.json

      # Prepare files for SonarQube analysis
      - name: Prepare SonarQube files
        run: |
          # Ensure ESLint report is valid JSON
          if [ ! -s eslint-report.json ]; then
            echo "ESLint report is empty, creating valid empty array"
            echo '[]' > eslint-report.json
          else
            # Validate JSON and create empty array if invalid
            if ! jq empty eslint-report.json 2>/dev/null; then
              echo "ESLint report is invalid JSON, creating valid empty array"
              echo '[]' > eslint-report.json
            fi
          fi
          
          # Ensure coverage files exist
          [ ! -f coverage-merged.out ] && touch coverage-merged.out
          [ ! -f coverage/lcov.info ] && mkdir -p coverage && touch coverage/lcov.info
      
      # Set up SonarQube Scanner
      - name: Set up SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
          SONAR_HOST_URL: 'https://sonarcloud.io'
        with:
          args: >
            -Dsonar.projectKey=Lazarev-Cloud_localca-go
            -Dsonar.organization=lazarev-cloud
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.go.coverage.reportPaths=coverage-merged.out
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**,**/node_modules/**,**/.next/**,**/__mocks__/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go,**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx
            -Dsonar.eslint.reportPaths=eslint-report.json
            -Dsonar.javascript.node.maxspace=4096
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.typescript.tsconfigPaths=tsconfig.json
