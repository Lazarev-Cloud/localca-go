---
name: Release

on:
  release:
    types: [created]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'latest'

permissions:
  contents: read

jobs:
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="localca-go"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build -v -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o "${BINARY_NAME}" .

          # Create archive
          ARCHIVE_NAME="localca-go-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
          fi

      - name: Generate checksums
        run: |
          for file in localca-go-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*; do
            sha256sum "$file" >> checksums.txt
          done

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            localca-go-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
            checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            localca-go-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
            checksums.txt
          retention-days: 30

  container-release:
    name: Container Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=latest
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Extract metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Build and push backend
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOMs
        run: |
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Generate SBOMs for the released images
          syft ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }} -o spdx-json=backend-${{ steps.version.outputs.version }}.spdx.json
          syft ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }} -o spdx-json=frontend-${{ steps.version.outputs.version }}.spdx.json

      - name: Attest backend
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}/backend
          subject-digest: ${{ steps.build-backend.outputs.digest }}
          push-to-registry: true

      - name: Attest frontend
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}/frontend
          subject-digest: ${{ steps.build-frontend.outputs.digest }}
          push-to-registry: true

      - name: Upload SBOMs
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *-${{ steps.version.outputs.version }}.spdx.json

      - name: Upload container artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-release
          path: |
            *-${{ steps.version.outputs.version }}.spdx.json
          retention-days: 90
