---
description: 
globs: 
alwaysApply: true
---
# LocalCA: Self-Hosted Certificate Authority

LocalCA is a complete solution for managing a private Certificate Authority within a local network. The project allows you to generate, manage, and deploy SSL/TLS certificates for internal services and clients with a modern web-based interface.

## Core Features

### Certificate Management
- Certificate lifecycle management (create, renew, revoke, delete)
- Support for both server and client certificates
- Subject Alternative Name (SAN) support
- PKCS#12 export for client certificates
- Certificate Revocation List (CRL) generation
- Automated certificate renewal with notifications

### Enhanced Storage & Performance
- Multi-backend storage support (File, PostgreSQL, S3/MinIO)
- Redis/KeyDB caching layer for improved performance
- Comprehensive audit logging
- Automated backup capabilities
- Data encryption for sensitive information

### Web Interface & API
- Modern React-based responsive web interface
- Real-time system statistics and monitoring
- RESTful API for all certificate operations
- ACME protocol support for automated certificate issuance
- Session-based authentication with CSRF protection

### Security & Monitoring
- Secure CA private key protection with passwords
- Comprehensive security headers and middleware
- Structured JSON logging for monitoring
- Email notifications for certificate expiration
- Complete audit trail for all operations

## Project Architecture

LocalCA follows a modern client-server architecture with enhanced storage capabilities:

- **Backend**: Go-based API server with Gin framework ([main.go](mdc:main.go))
- **Frontend**: Next.js 15 + React with App Router ([app/page.tsx](mdc:app/page.tsx))
- **Storage**: Multi-backend storage with caching ([pkg/storage](mdc:pkg/storage))
- **Database**: Optional PostgreSQL for enhanced features
- **Cache**: Redis/KeyDB for performance optimization
- **Object Storage**: S3/MinIO for scalable certificate storage

## Frontend-Backend Connectivity

The frontend connects to the backend through multiple channels:

1. **Direct API calls** from browser to backend API endpoints
2. **Server-side API calls** during Next.js SSR/SSG
3. **API proxy routes** at [app/api/proxy/[...path]](mdc:app/api/proxy/[...path]) for complex operations
4. **Real-time updates** through polling and state management

Configuration is managed in [lib/config.ts](mdc:lib/config.ts) with API rewrites in [next.config.mjs](mdc:next.config.mjs).

## Key Components

### 1. Certificate Service
Manages all certificate operations with enhanced storage:
- [pkg/certificates/ca.go](mdc:pkg/certificates/ca.go): CA certificate management
- [pkg/certificates/server.go](mdc:pkg/certificates/server.go): Server certificate operations
- [pkg/certificates/client.go](mdc:pkg/certificates/client.go): Client certificate operations

### 2. Enhanced Storage System
Multi-backend storage with caching and audit capabilities:
- [pkg/storage/enhanced.go](mdc:pkg/storage/enhanced.go): Enhanced storage implementation
- [pkg/storage/cached.go](mdc:pkg/storage/cached.go): Caching layer
- [pkg/database](mdc:pkg/database): PostgreSQL integration
- [pkg/s3storage](mdc:pkg/s3storage): S3/MinIO object storage

### 3. Web Interface
Modern Next.js application with comprehensive UI:
- [app](mdc:app): Next.js app directory with pages and API routes
- [components](mdc:components): Reusable React components with shadcn/ui
- [hooks](mdc:hooks): Custom React hooks for API integration

### 4. ACME Protocol Support
Automated certificate issuance and management:
- [pkg/acme](mdc:pkg/acme): ACME protocol implementation
- Supports standard ACME clients like Certbot and acme.sh

### 5. Security & Authentication
Comprehensive security implementation:
- [pkg/security](mdc:pkg/security): Security utilities and middleware
- [pkg/handlers/auth.go](mdc:pkg/handlers/auth.go): Authentication handlers
- Session management with secure cookies and CSRF protection

### 6. Configuration & Logging
Centralized configuration and structured logging:
- [pkg/config](mdc:pkg/config): Application configuration handling
- [pkg/logging](mdc:pkg/logging): Structured logging with multiple outputs
- [pkg/email](mdc:pkg/email): Email notification service

## Technology Stack

### Backend (Go 1.23+)
- **Framework**: Gin web framework
- **Database**: GORM with PostgreSQL support
- **Cache**: Redis/go-redis client
- **Storage**: MinIO Go SDK for S3 compatibility
- **Logging**: Logrus for structured logging
- **Crypto**: Go's crypto/x509 and crypto/tls packages

### Frontend (Next.js 15)
- **Framework**: Next.js with App Router
- **UI Library**: shadcn/ui + Radix UI components
- **Styling**: Tailwind CSS with custom design system
- **Forms**: React Hook Form with Zod validation
- **State Management**: React hooks and context
- **Testing**: Jest with React Testing Library

### Infrastructure
- **Containerization**: Docker with multi-stage builds
- **Orchestration**: Docker Compose for development and production
- **Database**: PostgreSQL 15+ for enhanced features
- **Cache**: Redis/KeyDB for performance
- **Object Storage**: MinIO for S3-compatible storage
