---
description: 
globs: 
alwaysApply: false
---
# Next.js App Router Structure

LocalCA uses Next.js App Router for frontend routing and API endpoints.

## App Directory Structure

- [app/](mdc:app) - Next.js app directory
  - [layout.tsx](mdc:app/layout.tsx) - Root layout with common UI elements
  - [page.tsx](mdc:app/page.tsx) - Dashboard home page

### Certificate Management

- [app/certificates/](mdc:app/certificates)
  - [page.tsx](mdc:app/certificates/page.tsx) - Certificates listing page
  - [[id]/](mdc:app/certificates/[id]) - Dynamic route for certificate details
    - [page.tsx](mdc:app/certificates/[id]/page.tsx) - Certificate details page

### Certificate Creation

- [app/create/](mdc:app/create)
  - [page.tsx](mdc:app/create/page.tsx) - Certificate creation page

### Settings

- [app/settings/](mdc:app/settings)
  - [page.tsx](mdc:app/settings/page.tsx) - Settings page

## API Routes

### CA Information

- [app/api/ca-info/](mdc:app/api/ca-info)
  - [route.ts](mdc:app/api/ca-info/route.ts) - CA information API endpoint

### Certificate Management

- [app/api/certificates/](mdc:app/api/certificates)
  - [route.ts](mdc:app/api/certificates/route.ts) - Certificates listing endpoint
  - [[id]/](mdc:app/api/certificates/[id])
    - [route.ts](mdc:app/api/certificates/[id]/route.ts) - Certificate details endpoint

### Certificate Operations

- [app/api/delete/](mdc:app/api/delete)
  - [route.ts](mdc:app/api/delete/route.ts) - Certificate deletion endpoint
- [app/api/renew/](mdc:app/api/renew)
  - [route.ts](mdc:app/api/renew/route.ts) - Certificate renewal endpoint
- [app/api/revoke/](mdc:app/api/revoke)
  - [route.ts](mdc:app/api/revoke/route.ts) - Certificate revocation endpoint

## Data Fetching

The App Router provides several data fetching strategies:

1. **Server Components** - Data fetching within server components
2. **React Server Actions** - Form submissions and mutations
3. **API Routes** - REST endpoints for client-side requests

## Route Conventions

- **Page Routes**: A `page.tsx` file defines a route
- **Layout Routes**: A `layout.tsx` file defines a shared layout
- **Dynamic Routes**: Folders with `[param]` syntax capture dynamic segments
- **API Routes**: A `route.ts` file defines an API endpoint
- **Loading States**: A `loading.tsx` file defines a loading UI
- **Error Handling**: An `error.tsx` file defines error UI

