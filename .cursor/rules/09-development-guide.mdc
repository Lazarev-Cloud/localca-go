---
description: 
globs: 
alwaysApply: false
---
# Development Guide and Coding Standards

This guide outlines the development standards, file organization, and best practices for the LocalCA project.

## Technology Stack

### Backend (Go)
- **Framework**: Gin web framework ([pkg/handlers](mdc:pkg/handlers))
- **Go Version**: 1.23+ (see [go.mod](mdc:go.mod))
- **Key Dependencies**:
  - `github.com/gin-gonic/gin` - HTTP web framework
  - `golang.org/x/crypto` - Cryptographic operations
  - `github.com/stretchr/testify` - Testing framework

### Frontend (Next.js + React)
- **Framework**: Next.js 15 with App Router ([app](mdc:app))
- **UI Library**: ShadcnUI + Radix UI components ([components](mdc:components))
- **Styling**: Tailwind CSS ([tailwind.config.ts](mdc:tailwind.config.ts))
- **State Management**: React hooks and context
- **Forms**: React Hook Form with Zod validation

## File Organization

### Backend Structure
```
pkg/
├── acme/           # ACME protocol implementation
├── certificates/   # Certificate management (CA, server, client)
├── config/         # Configuration management
├── email/          # Email notification service
├── handlers/       # HTTP request handlers and routing
├── security/       # Security utilities and middleware
└── storage/        # File-based storage implementation
```

### Frontend Structure
```
app/
├── api/            # API routes and proxy endpoints
├── certificates/   # Certificate management pages
├── create/         # Certificate creation flow
├── login/          # Authentication pages
├── settings/       # Application settings
└── setup/          # Initial setup flow

components/
├── ui/             # Base UI components (ShadcnUI)
├── forms/          # Form components
├── layout/         # Layout components
└── certificates/   # Certificate-specific components
```

## Coding Standards

### Go Backend Standards

1. **Package Organization**:
   - Each package should have a clear, single responsibility
   - Use descriptive package names (avoid generic names like `utils`)
   - Keep packages focused and cohesive

2. **Error Handling**:
   - Always handle errors explicitly
   - Use descriptive error messages
   - Wrap errors with context when appropriate

3. **Configuration**:
   - All configuration should go through [pkg/config](mdc:pkg/config)
   - Use environment variables for runtime configuration
   - Provide sensible defaults

4. **Security**:
   - All cryptographic operations should use [pkg/security](mdc:pkg/security)
   - Validate all inputs
   - Use secure defaults for TLS configuration

### Frontend Standards

1. **Component Structure**:
   - Use functional components with hooks
   - Keep components small and focused
   - Use TypeScript for all components

2. **State Management**:
   - Use React hooks for local state
   - Use context for shared state
   - Avoid prop drilling

3. **API Integration**:
   - Use the API proxy routes in [app/api](mdc:app/api)
   - Handle loading and error states
   - Implement proper error boundaries

4. **Styling**:
   - Use Tailwind CSS classes
   - Follow the design system in [components/ui](mdc:components/ui)
   - Ensure responsive design

## Development Workflow

### Local Development Setup

1. **Prerequisites**:
   - Go 1.23+ for backend development
   - Node.js 18+ for frontend development
   - Docker for containerized development

2. **Environment Setup**:
   - Create [cakey.txt](mdc:cakey.txt) with a secure password
   - Configure environment variables as needed
   - Use development scripts: [run-dev.sh](mdc:run-dev.sh) or [run-dev.bat](mdc:run-dev.bat)

3. **Running the Application**:
   - Backend: `go run main.go` (starts on port 8080)
   - Frontend: `npm run dev` (starts on port 3000)
   - ACME server: automatically starts on port 8555

### Testing Guidelines

1. **Backend Testing**:
   - Write unit tests for all packages
   - Use table-driven tests where appropriate
   - Test error conditions and edge cases
   - Run tests with: `go test ./...`

2. **Frontend Testing**:
   - Write component tests using Jest and React Testing Library
   - Test user interactions and API integration
   - Run tests with: `npm test`

3. **Integration Testing**:
   - Use Docker for integration testing
   - Test the complete certificate lifecycle
   - Verify ACME protocol compliance

### Security Considerations

1. **Input Validation**:
   - Validate all user inputs on both frontend and backend
   - Use Zod schemas for TypeScript validation
   - Sanitize inputs to prevent injection attacks

2. **Authentication & Authorization**:
   - Implement proper session management
   - Use CSRF protection
   - Validate permissions for all operations

3. **Certificate Security**:
   - Store private keys securely
   - Use appropriate key sizes and algorithms
   - Implement proper certificate validation

## API Design

### RESTful Endpoints
- Use standard HTTP methods (GET, POST, PUT, DELETE)
- Follow RESTful URL patterns
- Return appropriate HTTP status codes
- Use JSON for request/response bodies

### Error Responses
- Consistent error response format
- Include error codes and descriptive messages
- Log errors appropriately for debugging

### Authentication
- Token-based authentication
- Secure session management
- Proper logout functionality

## Performance Guidelines

1. **Backend Performance**:
   - Use connection pooling where appropriate
   - Implement proper caching strategies
   - Monitor memory usage for certificate operations

2. **Frontend Performance**:
   - Use Next.js optimization features
   - Implement proper loading states
   - Optimize bundle size

3. **Certificate Operations**:
   - Cache certificate metadata
   - Use efficient file I/O operations
   - Implement proper cleanup procedures

## Deployment Considerations

1. **Docker Deployment**:
   - Use multi-stage builds for optimization
   - Follow security best practices in [Dockerfile](mdc:Dockerfile)
   - Use [docker-compose.yml](mdc:docker-compose.yml) for local development

2. **Production Deployment**:
   - Enable TLS for production use
   - Configure proper logging
   - Set up monitoring and alerting
   - Follow security guidelines in [docs/BestPractice.md](mdc:docs/BestPractice.md)

3. **Configuration Management**:
   - Use environment variables for configuration
   - Secure sensitive configuration data
   - Document all configuration options
