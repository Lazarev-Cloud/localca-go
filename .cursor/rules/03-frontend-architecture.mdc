---
description: 
globs: 
alwaysApply: false
---
# Frontend Architecture

The LocalCA frontend is built with Next.js and React, providing a modern, responsive user interface for certificate management.

## Application Structure

The application follows Next.js 13+ App Router structure:

- [app](mdc:app): Main application directory
  - [page.tsx](mdc:app/page.tsx): Homepage/dashboard
  - [layout.tsx](mdc:app/layout.tsx): Root layout component
  - [globals.css](mdc:app/globals.css): Global styles
  - [api](mdc:app/api): API route handlers
  - [login](mdc:app/login): Login page
  - [setup](mdc:app/setup): Initial setup wizard
  - [certificates](mdc:app/certificates): Certificate management pages
  - [create](mdc:app/create): Certificate creation wizard
  - [settings](mdc:app/settings): Application settings

## Component Architecture

The UI uses a component-based architecture with reusable components:

- [components](mdc:components): Reusable UI components
  - Buttons, forms, modals, and other UI elements
  - Layout components for consistent page structure
  - Certificate visualization components

## UI Framework

The application uses a combination of:

- **TailwindCSS**: For styling and responsive design
- **shadcn/ui**: For UI components based on Radix UI primitives
- **React Hook Form**: For form handling
- **Zod**: For form validation

## State Management

State management is handled through:

- React's built-in hooks (useState, useContext)
- Custom hooks in the [hooks](mdc:hooks) directory for shared logic

## API Integration

The frontend communicates with the backend through:

- REST API calls for CRUD operations
- Server-side rendering for initial data loading
- Client-side data fetching for dynamic updates

## Key Pages

- **Dashboard**: Overview of all certificates and their status
- **Certificate Creation**: Wizard for creating new certificates
- **Certificate Details**: Viewing and managing certificate details
- **Settings**: Configuration of CA parameters
- **Login/Auth**: Authentication interface

## Frontend-Backend Integration

The frontend connects to the backend API defined in [pkg/handlers](mdc:pkg/handlers) through HTTP requests, configured via environment variables:

- `NEXT_PUBLIC_API_URL`: Base URL for the backend API
